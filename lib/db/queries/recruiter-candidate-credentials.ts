import type { RecruiterCredentialRow } from '@/lib/types/tables'

import { getCandidateCredentialsSection } from './candidate-credentials-core'

/* -------------------------------------------------------------------------- */
/*                R E C R U I T E R   →   C A N D I D A T E   C R E D S       */
/* -------------------------------------------------------------------------- */

/**
 * Return a paginated slice of a candidate’s credentials tailored for recruiter
 * views, leveraging the centralised `getCandidateCredentialsSection` helper
 * to avoid duplicated query logic.
 *
 * When `verifiedFirst` is true, verified credentials are bubbled to the top
 * client-side after the primary ORDER BY generated by the shared helper.
 */
export async function getRecruiterCandidateCredentialsPage(
  candidateId: number,
  page: number,
  pageSize = 10,
  sortBy: 'title' | 'category' | 'issuer' | 'status' | 'createdAt' | 'id' = 'createdAt',
  order: 'asc' | 'desc' = 'desc',
  searchTerm = '',
  verifiedFirst = false,
): Promise<{ credentials: RecruiterCredentialRow[]; hasNext: boolean }> {
  /* -------------------------------- Query -------------------------------- */
  const { rows, hasNext } = await getCandidateCredentialsSection(
    candidateId,
    page,
    pageSize,
    // Map recruiter-specific "id” sort to createdAt in the core helper
    sortBy === 'id' ? 'createdAt' : sortBy,
    order,
    searchTerm,
  )

  let credentials: RecruiterCredentialRow[] = rows.map((r) => ({
    id: r.id,
    title: r.title,
    category: r.category ?? '',
    issuer: r.issuer,
    status: r.status,
    fileUrl: r.fileUrl ?? null,
    txHash: r.txHash ?? null,
    vcJson: r.vcJson ?? null,
  }))

  /* ------------------------- Verified-first tweak ------------------------ */
  if (verifiedFirst) {
    credentials = credentials.sort(
      (a, b) => Number(b.status === 'verified') - Number(a.status === 'verified'),
    )
  }

  return { credentials, hasNext }
}
